type List = {
    int[] content;
    int size;
}

List init(){
    return init(16);
}

// precondition: capacity > 0
List init(int capacity){
    int[capacity] array;
    return List(content = array, size = 0);
}

// helper to make backing array larger
Void extend_if_necessary(List lst){
    int[] arr = lst.content;
    int size = lst.size;
    if size == arr.length {
        int[2 * size] new_backing_array;
        for (int i = 0; i < size; i = i + 1){
            new_backing_array[i] = arr[i];
        }
        lst.content = new_backing_array;
    }
}

// amortized O(1)
append(List lst, int value){
    extend_if_necessary(lst);
    lst.content[lst.size] = value;
    lst.size = lst.size + 1;
}

// O(n)
prepend(List lst, int value){
    extend_if_necessary(lst);
    int[] arr = lst.content;
    int size = lst.size;
    for (int i = size - 1; i >= 0; i = i - 1){
        arr[i+1] = arr[i];
    }
    arr[0] = value;
    list.size = size + 1;
}
