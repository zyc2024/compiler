/*
    An implementation of a functional list for integers
*/

type T = {
    const Node head;
}

/*  
    the internal type consisting of a pointer in linkedlist chain and the value 
    at the specific node.
*/
type Node = {
    const Node next;
    const int value;
}

T empty(){
    return T(head = null);
}

// Return the length (number of elements) of the given list.
int length(T xs){
    int size = 0;
    Node curr = xs.head;
    while (curr != null){
        size = size + 1;
        curr = curr.next;
    }
    return size;
}

// cons(x,xs) = x :: xs
T cons(int x, T xs){
    return T(head = Node(next = xs.head, value = x));
}

// Return the first element of the given list.
// hd(xs) is [false, ?] when xs = [] and otherwise [true, x] for xs = x :: t
(bool, int) hd(T xs){
    if xs.head == null {
        return false, 0;
    }
    return true, xs.head.value;
}

// Return the given list without its first element.
// tl(xs) is (true, t) if xs = x :: t and otherwise (false, ?)
(bool, T) tl(T xs){
    if xs.head == null {
        return false, null;
    }
    return true, xs.head.next;
}

// Return the n-th element of the given list. 
// The first element (head of the list) is at position 0.
(bool, int) nth(T xs, int index){
    Node curr = xs.head;
    while(curr != null && index > 0){
        curr = curr.next;
        index = index - 1;
    }
    if (curr == null || index < 0){
        return false, 0;
    }
    return true, curr.value;
}

int compare_lengths(T xs1, T xs2){
    int len1 = length(xs1);
    int len2 = length(xs2);
    if (len1 == len2){
        return 0;
    }
    else if (len1 > len2){
        return 1;
    }
    return -1;
}